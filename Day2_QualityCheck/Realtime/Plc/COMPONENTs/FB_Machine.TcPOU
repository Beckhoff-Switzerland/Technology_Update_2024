<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_Machine" Id="{7aff6a33-8936-4b27-af92-0a9e881f3e5e}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this POU directly'} 
FUNCTION_BLOCK FB_Machine EXTENDS FB_Unit
VAR CONSTANT
	N_NBR_MOVERS : UINT := 2;	

	(*	Unique station identification 
		Station ID *)
	S_STATION_NAME_1 : STRING(20) := 'Load';
	S_STATION_NAME_2 : STRING(20) := 'Camera';
	S_STATION_NAME_3 : STRING(20) := 'Unload';
END_VAR
VAR
	(* 	XPlanar System - 1 per associated XPlanar 
		The system is the container and organizer for all subsequent XPlanar objects. 
		All objects are registered with this system	*)
	fbXpSystem 		: FB_XP_System();
	iXpSystem_Plc 	: I_XP_System_PLC := fbXpSystem; 
	
	(* 	XPlanar Collision Avoidance Groupe - 1 per associated XPlanar 
		The Planar group is a software object that prevents collisions between Planar movers as well as collisions of Planar movers with the boundary of 
		the stator area on the two-dimensional XPlanar stator area. To do this, the 2D areas of all objects in the group are blocked. When a motion command 
		is transferred to a mover, the required area is requested from the Planar group and the motion command is rejected if this area would collide 
		with already reserved areas. If the motion command can be executed, the area is added to the set of reserved area and blocked accordingly.	*)
	fbXpGroup : FB_XP_Group(ipSystem := fbXpSystem);
		
	(* 	XPlanar Environment - 1 per associated XPlanar 
		The Planar environment is a software object that represents the two-dimensional XPlanar stator surface. Together with Planar movers in a group, 
		it prevents collisions of the movers with the edge of the surface. *)
	fbXpEnvironment : FB_XP_Environment(ipSystem := fbXpSystem);	
	
	(* 	XPlanar mover - n per associated XPlanar. Can be instantiated as an array and/or individually
		The Planar mover is a software object that represents an XPlanar mover. It summarizes the state of the real mover (position, velocity, etc.) 
		for the user. In addition, the user has the possibility to influence or control the state of the real mover via the Planar mover. *)								
	aMovers : ARRAY[1..N_NBR_MOVERS] OF FB_XP_Mover[
		(ipSystem := fbXpSystem),
		(ipSystem := fbXpSystem)];
	
	(* 	XPlanar track - n per associated XPlanar. Can be instantiated as an array and/or individually
		The Planar track is a software object that represents a (virtual) one-dimensional path on the two-dimensional XPlanar stator surface. 
		Several Planar movers can be lined up and moved on this path. Collisions are prevented by keeping a preset distance between the movers. *)		
	fbTrackA : FB_XP_Track(ipSystem	:= fbXpSystem);	
		
	(* 	XPlanar station - n per associated XPlanar. Can be instantiated as an array and/or individually
		The stations are the main component of the application. As soon as the system has been started up and all movers are on the track, the movers are only sent from one station to the next.
		Parameters:
			xPos, yPos 			= Absolute position of the station on the xPlanar.
			ipAccocietedTrack 	= The track on which the station is located. If the XY position is not on this track, the next possible track position is assumed on this track.
			sStationID 			= Unique name that may only exist once.
			sStationGroupID 	= A name for a group to which this station belongs. Important for redundant stations
			StationAheadx 		= Which station can be approached directly from this station in the positive direction? After a switch there are several possibilities. *)		
	fbStation1	: FB_XP_Station(
					ipSystem := fbXpSystem,
					ipAccocietedTrack := fbTrackA,
					sUniqueName := S_STATION_NAME_1,
					sTargetGroup := '',
					nMoverQueueSize	:= 1,
					xPos := 120,
					yPos := 60);
							
	fbStation2 	: FB_XP_Station(
					ipSystem := fbXpSystem,
					ipAccocietedTrack := fbTrackA,
					sUniqueName := S_STATION_NAME_2,
					sTargetGroup := '',
					nMoverQueueSize := 1,
					xPos := 60,
					yPos := 240);			
	
	fbStation3 	: FB_XP_Station(
					ipSystem := fbXpSystem,
					ipAccocietedTrack := fbTrackA,
					sUniqueName := S_STATION_NAME_3,
					sTargetGroup := '',
					nMoverQueueSize	:= 1,
					xPos := 120,
					yPos := 420);

	(* 	Vision system
		Camera, illumination, trigger, image processing *)								
	fbVsSystem 		: FB_VsSystem;
	iVsSystem_Plc 	: I_VsSystem_Plc := fbVsSystem;
	
	(* 	Machine speed controller
		Controls movement speed based on commanded ppm *)		
	stTaskInfoData : PlcTaskSystemInfo;
	fbSpeedController : FB_Ctrl_PI;
	stSpeedController_Params : ST_Ctrl_PI_Params := (
								bARWOnIPartOnly:= FALSE,
								fOutMinLimit := 100,
								fOutMaxLimit := 1000,
								fKp := 15,
								tTn := T#40S);
	fbRollingAveragePpm : FB_RollingAverage_Ppm;

	(*	Process control variables *)				
	bGetNextProduct : BOOL; // Get next product in manual mode

	(*  The mover leaving station 1 is under observation
		to detect its arrival in the fly-by station 2 (Camera) *)
	bMoverIsObserved : BOOL;
	iMoverObserved : I_XP_Mover_PLC;
	
	eObservationState : E_ObservationState;
	iMoverObserved_Feedback : I_CH_Feedback;
END_VAR

VAR PERSISTENT
	(* 	Analytics
		Overall Equipment Efficiency
		ML Calculation time *)		
	{attribute 'TcAnalytics'}
	{attribute 'OPC.UA.DA' := '1'}	
	stAnalytics : ST_Analytics;		
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="States" Id="{9abdd634-1221-4520-a60b-55e85111d4c2}" />
    <Method Name="Execute_Observation" Id="{cc06f3d5-d364-4b4c-850d-5dd05f38a471}">
      <Declaration><![CDATA[METHOD PROTECTED Execute_Observation : I_CH_Feedback
VAR CONSTANT
	NBR_CYCLES_AHEAD : UINT := 20; // At least 3.5ms to fit camera requirement
END_VAR
VAR_IN_OUT
	bMoverIsObserved : BOOL;
	iMoverObserved : I_XP_Mover_PLC;
END_VAR
VAR
	(* Calculation of the position window under the camera *)
	fPosition_Mover : LREAL;
	fVelocity_Mover : LREAL;	
	fPosition_Delta : LREAL;
	fPosition_Window : LREAL;
	
	(* Calculation of the time in position *)
	tNow_DC : T_DCTIME64;
	tDelta : ULINT;
	tInPosition_DC : T_DCTIME64;	
END_VAR
VAR_INST
	(* Result Timeout *)
	fbObservationTimeout : TON := (PT:=T#400MS);	
	
	(* Quality feedback *)
	bQualityGood : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Avoid deadlock if result not present for unloading *)
fbObservationTimeout();
IF fbObservationTimeout.Q THEN
	fbObservationTimeout.IN := FALSE;
	stAnalytics.tMlCalculation := fbObservationTimeout.ET;
	iMoverObserved_Feedback := 0;
	bMoverIsObserved := FALSE;
	iMoverObserved := 0;
	fbRollingAveragePpm.Increment();
	stPackTags.Admin.ProdProcessedCount[1].Count := stPackTags.Admin.ProdProcessedCount[1].Count + 1;
	stPackTags.Admin.ProdDefectiveCount[1].Count := stPackTags.Admin.ProdDefectiveCount[1].Count + 1;
	eObservationState := E_ObservationState.Idle;
END_IF

CASE eObservationState OF
	E_ObservationState.Idle:
		(* Trigger the sequencer *)
		IF bMoverIsObserved AND iMoverObserved <> 0 THEN
			eObservationState := E_ObservationState.Observing;
		END_IF
		
	E_ObservationState.Observing:
		fPosition_Mover := iMoverObserved.PlanarMover.MCTOPLC.SETONTRACK.SetPos; // Store position data 
		fVelocity_Mover := iMoverObserved.PlanarMover.MCTOPLC.SETONTRACK.SetVelo; // Store velocity data		
		fPosition_Delta := iXpSystem_Plc.Station(S_STATION_NAME_2).PositionOnTrack - fPosition_Mover; // Calculate the y position delta
		fPosition_Window := (fVelocity_Mover(*_mm/s*) / 1_000(*_mm/ms*) * (stTaskInfoData.CycleTime / 10_000)(*_mm/cycle*)) * NBR_CYCLES_AHEAD (*_mm*);
		
		(* Leave if mover is not moving *)
		IF (fVelocity_Mover = 0) THEN RETURN; END_IF 
		
		(* Leave if mover is not in window *)
		IF 	fPosition_Window < 0 // Mover direction wrong
		OR 	fPosition_Delta < 0 // Mover already passed camera station
		OR 	ABS(fPosition_Delta) > ABS(fPosition_Window) THEN // Mover not within the window yet
			RETURN;
		END_IF 
		
		(* Predict the time in station with constant velocity *)
		tNow_DC := F_GetCurDcTaskTime64()(*_1ns*);		
		tDelta := TO_ULINT(fPosition_Delta(*_mm*) * 1_000_000_000 / fVelocity_Mover(*_mm/s*));	
		tInPosition_DC := tNow_DC(*_1ns*) + tDelta;
		
		(* Start the visual quality rating *)
		iMoverObserved_Feedback := fbVsSystem.GetQualityRating(
										nDcTrigger:= tInPosition_DC, 
										nNbrHoles_Expected:= stPackTags.Command.Parameter[1].Value, 
										fHoleDiameter:= stPackTags.Command.Parameter[2].Value, 
										bQualityGood=> bQualityGood, 
										nNbrHoles_Found=> stPackTags.Status.Parameter[1].Value);
			
		fbObservationTimeout.IN := TRUE;	
		eObservationState := E_ObservationState.Qualifying;
			
	E_ObservationState.Qualifying:
		(* 	If the quality rating is done
			Store product rating *)
		IF iMoverObserved_Feedback <> 0 AND_THEN iMoverObserved_Feedback.Done THEN
			iMoverObserved_Feedback := 0;
			bMoverIsObserved := FALSE;
			iMoverObserved := 0;
			fbRollingAveragePpm.Increment();	
			
			IF bQualityGood THEN
				stPackTags.Admin.ProdProcessedCount[1].Count := stPackTags.Admin.ProdProcessedCount[1].Count + 1;
			ELSE
				stPackTags.Admin.ProdProcessedCount[1].Count := stPackTags.Admin.ProdProcessedCount[1].Count + 1;
				stPackTags.Admin.ProdDefectiveCount[1].Count := stPackTags.Admin.ProdDefectiveCount[1].Count + 1;
				stAnalytics.bDefectivePart := TRUE;
			END_IF

			fbObservationTimeout.IN := FALSE;
			stAnalytics.tMlCalculation := fbObservationTimeout.ET;
			eObservationState := E_ObservationState.Done;
		END_IF
	
	E_ObservationState.Done:
		eObservationState := E_ObservationState.Idle;
		stAnalytics.bDefectivePart := FALSE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Aborting" Id="{fd31a7b8-973b-49b3-820a-9791a175581b}" FolderPath="States\">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Aborting'}
METHOD M_Aborting
VAR_INST
	iFeedback : I_CH_Feedback;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Disable XPlanar system if still enabled *)
IF iFeedback = 0 THEN
	iFeedback := iXpSystem_Plc.Disable();
END_IF

(* 	If XPlanar is disabled
	Report stop reason and pause ppm counter *)
IF iFeedback.Done THEN
	stPackTags.Admin.StopReason[1].ID := E_PMLStopReason.None; // Stop reason not specified	
	fbRollingAveragePpm.Enable := FALSE;
	iFeedback := 0;
	M_StateComplete();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Execute" Id="{e7e894d4-6013-4c60-8dcb-e8eb9cb26475}" FolderPath="States\">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Execute'}
METHOD M_Execute
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* 	Apply production speed setpoint in ppm *)
fbSpeedController.fActualValue := fbRollingAveragePpm.Count;
stPackTags.Status.CurMachineSpeed := fbRollingAveragePpm.Count;
fbSpeedController.fSetpointValue := stPackTags.Command.MachSpeed;

(* 	Production speed controller is only active in production mode *)
IF 	stPackTags.Status.UnitModeCurrent = TO_DINT(E_PMLMode.PRODUCTION) 
AND fbRollingAveragePpm.Initialized THEN
		fbSpeedController.eMode := E_CTRL_MODE.eCTRL_MODE_ACTIVE;
ELSE
		(* 	In other modes the setpoint is open loop with default proportional gain (kp)*)
		aMovers[1].SetDynConstraint_Path(stPackTags.Command.MachSpeed * stSpeedController_Params.fKp, 10_000, 10_000, 100_000);
		aMovers[2].SetDynConstraint_Path(stPackTags.Command.MachSpeed * stSpeedController_Params.fKp, 10_000, 10_000, 100_000);
END_IF

(* 	Production speed controller saturation (limit)*)
IF fbSpeedController.fOut < 100 THEN
	aMovers[1].SetDynConstraint_Path(100, 10_000, 10_000, 100_000);
	aMovers[2].SetDynConstraint_Path(100, 10_000, 10_000, 100_000);	

ELSIF fbSpeedController.fOut > 900 THEN
	aMovers[1].SetDynConstraint_Path(900, 10_000, 10_000, 100_000);
	aMovers[2].SetDynConstraint_Path(900, 10_000, 10_000, 100_000);
ELSE
	aMovers[1].SetDynConstraint_Path(fbSpeedController.fOut, 10_000, 10_000, 100_000);
	aMovers[2].SetDynConstraint_Path(fbSpeedController.fOut, 10_000, 10_000, 100_000);
END_IF

IF fbSpeedController.fActualValue > fbSpeedController.fSetpointValue * 1.2 THEN
	fbSpeedController.eMode := E_CTRL_MODE.eCTRL_MODE_RESET;
END_IF

(* Process movers in station 1 *)
IF (iXpSystem_Plc.Station(S_STATION_NAME_1).MoversInPlace) THEN
	IF (stPackTags.Status.UnitModeCurrent = TO_DINT(E_PMLMode.PRODUCTION)) THEN	
		iMoverObserved := iXpSystem_Plc.Station(S_STATION_NAME_1).MoversInQueue[0]; // Start to observe the mover
		bMoverIsObserved := TRUE;
		iXpSystem_Plc.Station(S_STATION_NAME_1).SendMoversToStation(S_STATION_NAME_3); // Send mover directly to the unload station
	ELSIF (stPackTags.Status.UnitModeCurrent = TO_DINT(E_PMLMode.MANUAL) ) THEN
		iXpSystem_Plc.Station(S_STATION_NAME_1).SendMoversToStation(S_STATION_NAME_2); // Send mover into the camera station
	ELSE
		iXpSystem_Plc.Station(S_STATION_NAME_1).SendMoversToStation(S_STATION_NAME_3); // Send mover to avoid deadlock
	END_IF
END_IF

(* Process mover under observation *)
THIS^.Execute_Observation(bMoverIsObserved, iMoverObserved);

(* 	Process movers in station 2 
	only required in manual mode *)
IF (iXpSystem_Plc.Station(S_STATION_NAME_2).MoversInPlace AND bGetNextProduct) THEN
	bGetNextProduct := FALSE;
	iXpSystem_Plc.Station(S_STATION_NAME_2).SendMoversToStation(S_STATION_NAME_3);
END_IF

(* 	Process movers in station 3 
	Touch and go to indicate unload station *)
IF (iXpSystem_Plc.Station(S_STATION_NAME_3).MoversInPlace) THEN
	iXpSystem_Plc.Station(S_STATION_NAME_3).SendMoversToStation(S_STATION_NAME_1);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Resetting" Id="{a1d014a9-d139-41e5-8d61-d6702af28c0f}" FolderPath="States\">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Resetting'}
METHOD M_Resetting]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Reset stop reason and equipment interlock *)
stPackTags.Admin.StopReason[1].ID:= E_PMLStopReason.None;
stPackTags.Status.EquipmentInterlock.Blocked := FALSE;
stPackTags.Status.EquipmentInterlock.Starved := FALSE;

(* Reset machine speed control *)
stPackTags.Command.MachSpeed := 20;
fbSpeedController.eMode := E_CTRL_MODE.eCTRL_MODE_RESET;
fbSpeedController.fSetpointValue := stPackTags.Command.MachSpeed;

(* Reset the demo pack tags *)
stPackTags.Command.Parameter[1].ID := 758;
stPackTags.Command.Parameter[1].Name := 'expected_number_of_holes';
stPackTags.Command.Parameter[1].Unit := 'none';
stPackTags.Command.Parameter[1].Value := 8;

stPackTags.Command.Parameter[2].ID := 759;
stPackTags.Command.Parameter[2].Name := 'diameter_of_drillhole';
stPackTags.Command.Parameter[2].Unit := 'mm';
stPackTags.Command.Parameter[2].Value := 5;

stPackTags.Status.Parameter[1].ID := 941;
stPackTags.Status.Parameter[1].Name := 'number_of_correct_holes';
stPackTags.Status.Parameter[1].Unit := 'none';
stPackTags.Status.Parameter[1].Value := 0;

(* Release observed mover*)
bMoverIsObserved := FALSE;
iMoverObserved := 0;
eObservationState := E_ObservationState.Idle;
iMoverObserved_Feedback := 0;

M_StateComplete();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Starting" Id="{ea4a9cb7-ff50-4f24-8435-b7af158e0ff6}" FolderPath="States\">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Starting'}
METHOD M_Starting
VAR_INST
	iFeedback : I_CH_Feedback;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Enable XPlanar system if still enabled *)
IF iFeedback = 0 THEN
	iFeedback := iXpSystem_Plc.Enable();
END_IF

(* 	If XPlanar is enabled
	Start ppm counter *)
IF iFeedback <> 0 AND_THEN iFeedback.Done THEN
	fbRollingAveragePpm.Enable := TRUE;
	iFeedback := 0;
	M_StateComplete();
END_IF

(* 	If XPlanar enable failed
	Request machine to abort *)
IF iFeedback <> 0 AND_THEN iFeedback.Error THEN
	fbStateManager(eMode	:= nMode, eCommand := E_PMLState.ePMLState_Aborting, eState	=> eState);
	iFeedback := 0;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopping" Id="{df82d75c-7a3d-474a-a1a0-245be1510f02}" FolderPath="States\">
      <Declaration><![CDATA[{attribute 'object_name' := 'M_Stopping'}
METHOD M_Stopping
VAR_INST
	iFeedback : I_CH_Feedback;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Disable XPlanar system if still enabled *)
IF iFeedback = 0 THEN
	iFeedback := iXpSystem_Plc.Disable();
END_IF

(* 	If XPlanar is disabled
	Report stop reason and pause ppm counter *)
IF iFeedback.Done THEN
	stPackTags.Admin.StopReason[1].ID := E_PMLStopReason.Stop_Actuators;
	fbRollingAveragePpm.Enable := FALSE;
	iFeedback := 0;
	M_StateComplete();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Update" Id="{442f3fcb-8be3-4385-828a-d2b67952baf9}">
      <Declaration><![CDATA[METHOD Update
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Update the unit implementation *)
SUPER^();

(* Update the xplanar *)
IF NOT iXpSystem_Plc.Initialized THEN
	iXpSystem_Plc.Initialize();
ELSE
	iXpSystem_Plc.Update();
END_IF

(* Update the vision system *)
IF NOT iVsSystem_Plc.Initialized THEN
	iVsSystem_Plc.Initialize();
ELSE
	iVsSystem_Plc.Update();
END_IF

(* Update the machine speed controller *)
stTaskInfoData := _TaskInfo[GETCURTASKINDEXEX()];
stSpeedController_Params.tTaskCycleTime := TO_TIME(stTaskInfoData.CycleTime(*_100ns*)/10_000(*_ms*));
stSpeedController_Params.tCtrlCycleTime := T#1S;
fbSpeedController(stParams:=stSpeedController_Params);
fbRollingAveragePpm();

(* Update the analytics statistic *)
stAnalytics.nDefectiveUnits := TO_ULINT(stPackTags.Admin.ProdDefectiveCount[1].Count);
stAnalytics.nUnitsProduced := TO_ULINT(stPackTags.Admin.ProdProcessedCount[1].Count);
stAnalytics.nState := TO_UINT(stPackTags.Status.StateCurrent);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateSlow" Id="{8dbd4b62-4c71-46b8-aa71-07025c907362}">
      <Declaration><![CDATA[METHOD UpdateSlow
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[iVsSystem_Plc.UpdateSlow();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Machine">
      <LineId Id="223" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Execute_Observation">
      <LineId Id="173" Count="0" />
      <LineId Id="162" Count="2" />
      <LineId Id="175" Count="0" />
      <LineId Id="165" Count="2" />
      <LineId Id="170" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="160" Count="1" />
      <LineId Id="7" Count="5" />
      <LineId Id="18" Count="23" />
      <LineId Id="236" Count="4" />
      <LineId Id="169" Count="0" />
      <LineId Id="45" Count="6" />
      <LineId Id="93" Count="0" />
      <LineId Id="52" Count="8" />
      <LineId Id="206" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="63" Count="4" />
      <LineId Id="205" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.M_Aborting">
      <LineId Id="46" Count="11" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.M_Execute">
      <LineId Id="2602" Count="16" />
      <LineId Id="2731" Count="0" />
      <LineId Id="2730" Count="0" />
      <LineId Id="2620" Count="1" />
      <LineId Id="2729" Count="0" />
      <LineId Id="2727" Count="0" />
      <LineId Id="2723" Count="0" />
      <LineId Id="2732" Count="0" />
      <LineId Id="2623" Count="19" />
      <LineId Id="2682" Count="0" />
      <LineId Id="2720" Count="0" />
      <LineId Id="2707" Count="12" />
      <LineId Id="38" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.M_Resetting">
      <LineId Id="29" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="44" Count="2" />
      <LineId Id="53" Count="3" />
      <LineId Id="52" Count="0" />
      <LineId Id="48" Count="3" />
      <LineId Id="47" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="34" Count="2" />
      <LineId Id="10" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.M_Starting">
      <LineId Id="53" Count="3" />
      <LineId Id="68" Count="1" />
      <LineId Id="57" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="71" Count="1" />
      <LineId Id="63" Count="1" />
      <LineId Id="66" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.M_Stopping">
      <LineId Id="44" Count="11" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Update">
      <LineId Id="6" Count="10" />
      <LineId Id="40" Count="3" />
      <LineId Id="39" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="19" Count="5" />
      <LineId Id="45" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.UpdateSlow">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>