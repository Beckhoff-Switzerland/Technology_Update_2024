<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Productversion="">
  <POU Name="FB_N1_M4_State_Stopped" Id="d8365c61-e6c5-45b9-889b-85387bbfdd32" SpecialFunc="None">
    <Declaration><![CDATA[//The Timing Analysis 1Ch measures time difference between on- and off-periods and counts the amount of on-periods. The on-period starts when the condition of operator and threshold is met. Optional a boolean signal for Enable Execution can be selected, so that the algorithm is just active if the value of the selected signal is TRUE.
FUNCTION_BLOCK FB_N1_M4_State_Stopped
VAR_INPUT
	nDataIn: UINT; 
	tTimestamp: ULINT; 
	bEnableExecution: BOOL := TRUE; 
	bReset: BOOL; 
	bReconfigure: BOOL := TRUE;
END_VAR
VAR_INPUT PERSISTENT
	stThresholdLevelOn: ST_ALY_Threshold; 
	fTolerance: LREAL; 
END_VAR
VAR_OUTPUT
	bError: BOOL;
	ipTcResult: I_TcMessage;
	bNewResult: BOOL;
	bIsOn: BOOL;
	nCountOn: ULINT;
	fbTimeCurrentInterval: FB_ALY_TimeSpan;
	fbTimeOnTotal: FB_ALY_TimeSpan;
	fbTimeOffTotal: FB_ALY_TimeSpan;
END_VAR
VAR
	
	R_TRIG_Reconfigure: R_TRIG;
	
	fbALY_TimingAnalysis_1Ch: FB_ALY_TimingAnalysis_1Ch := ( bPersistent:= TRUE );
END_VAR
VAR PERSISTENT
	bConfigured: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Call" Id="f4a4968e-f6de-493f-a90c-8585a45913e2">
      <Declaration><![CDATA[METHOD Call : BOOL
VAR_INPUT
	nCurrentContext: DWORD;
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bConfigured THEN
	bConfigured:= TRUE;

	fTolerance:= 0;

	stThresholdLevelOn.eComparisonOperator:= E_ALY_ComparisonOperator.Equals;
	stThresholdLevelOn.fThreshold:= 2;

	fbALY_TimingAnalysis_1Ch.fTolerance:= fTolerance;
END_IF

R_TRIG_Reconfigure(CLK:= bReconfigure);
IF R_TRIG_Reconfigure.Q THEN
	fbALY_TimingAnalysis_1Ch.ConfigureChannel(stThresholdLevel:= stThresholdLevelOn);

	fbALY_TimingAnalysis_1Ch.Configure();

	bReconfigure:= FALSE;
END_IF

IF bReset THEN
	Reset();
END_IF

IF bEnableExecution THEN
	IF F_HasContext(nCurrentContext, nContext) THEN
		fbALY_TimingAnalysis_1Ch.SetChannelValue(Input:= nDataIn);

		fbALY_TimingAnalysis_1Ch.Call(tTimestamp:= tTimestamp);

		bNewResult:= fbALY_TimingAnalysis_1Ch.bNewResult;
		bIsOn:= fbALY_TimingAnalysis_1Ch.bIsOn;
		nCountOn:= fbALY_TimingAnalysis_1Ch.nCountOn;
		fbTimeCurrentInterval:= fbALY_TimingAnalysis_1Ch.fbTimeCurrentInterval;
		fbTimeOnTotal:= fbALY_TimingAnalysis_1Ch.fbTimeOnTotal;
		fbTimeOffTotal:= fbALY_TimingAnalysis_1Ch.fbTimeOffTotal;

		bError:= fbALY_TimingAnalysis_1Ch.bError;
		ipTcResult:= fbALY_TimingAnalysis_1Ch.ipResultMessage;
	END_IF
ELSE
	bNewResult:= FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="b91e58e1-9318-4edf-a46d-7a2f43209c72">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Reset:= fbALY_TimingAnalysis_1Ch.Reset();

bNewResult:= fbALY_TimingAnalysis_1Ch.bNewResult;
bIsOn:= fbALY_TimingAnalysis_1Ch.bIsOn;
nCountOn:= fbALY_TimingAnalysis_1Ch.nCountOn;
fbTimeCurrentInterval:= fbALY_TimingAnalysis_1Ch.fbTimeCurrentInterval;
fbTimeOnTotal:= fbALY_TimingAnalysis_1Ch.fbTimeOnTotal;
fbTimeOffTotal:= fbALY_TimingAnalysis_1Ch.fbTimeOffTotal;

bError:= NOT Reset;
ipTcResult:= fbALY_TimingAnalysis_1Ch.ipResultMessage;]]></ST>
      </Implementation>
    </Method>
    <Property Name="nContext" Id="14049f65-9ffc-4128-9173-65262feb019d">
      <Declaration><![CDATA[PROPERTY nContext : DWORD]]></Declaration>
      <Get Name="Get" Id="fb0253c4-2368-4a3e-a872-778b8e434236">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[nContext:= E_VirtualInput.eContext_V1_Virtual_Input_Source;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>